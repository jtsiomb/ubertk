#ifndef UBERTK_EVENTS_H_
#define UBERTK_EVENTS_H_

#include <utk_widget.h>
#include <utk_types.h>

namespace utk {

enum {
	MOUSE_LEFT,
	MOUSE_MIDDLE,
	MOUSE_RIGHT,
	MOUSE_AUX1,
	MOUSE_AUX2
};
#define MOUSE_NONE		(-1)

class Event {
public:
	Event();
	virtual ~Event();
};

// ---- low level events, generated by the app ----
class MouseEvent : public Event {
public:
	int x, y;

	MouseEvent();
	MouseEvent(int x, int y);
};

class MMotionEvent : public MouseEvent {
public:
	MMotionEvent();
	MMotionEvent(int x, int y);
};

class MButtonEvent : public MouseEvent {
public:
	int button;
	bool pressed;

	MButtonEvent();
	MButtonEvent(int bn, int x, int y);
};


class KeyboardEvent : public Event {
public:
	int key;
	bool pressed;

	KeyboardEvent(int key = 0);
};


// ---- high-level events, generated by UTK ----
class HighLevelEvent : public Event {
public:
	Widget *widget;
};

// click is generated on mouse button release
class ClickEvent : public HighLevelEvent {
public:
	int button;
	int x, y;	// local widget coords
	unsigned int time;	// to catch double-clicks
};

class FocusEvent : public HighLevelEvent {
public:
	bool focus;
};

/* This is part of the low-level interface to utk.
 * The client program must call this to give input to utk.
 */
void event(const Event *e);

int get_button_state();
IVec2 get_last_drag_pos();

typedef void (*Callback)(const Event*);

}	// end namespace utk

#endif	// UBERTK_EVENTS_H_
