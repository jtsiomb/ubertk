#ifndef UBERTK_EVENTS_H_
#define UBERTK_EVENTS_H_

#include <list>
#include <utk_types.h>

namespace utk {

class Widget;

enum {
	MOUSE_LEFT,
	MOUSE_MIDDLE,
	MOUSE_RIGHT,
	MOUSE_AUX1,
	MOUSE_AUX2
};
#define MOUSE_NONE		(-1)

enum {
	EVENT_NULL = 0,
	EVENT_MMOTION,
	EVENT_MBUTTON,
	EVENT_KEYBOARD,

	EVENT_CLICK = 100,
	EVENT_FOCUS,
	EVENT_MODIFY,

	EVENT_COUNT		// not an event :)
};

class Event {
protected:
	int event_id;

public:
	Widget *widget;	// only valid for high level events

	Event();
	virtual ~Event();

	virtual int get_event_id() const;
};

// ---- low level events, generated by the app ----
class MouseEvent : public Event {
public:
	int x, y;

	MouseEvent(int x = 0, int y = 0);
};

class MMotionEvent : public MouseEvent {
public:
	MMotionEvent(int x = 0, int y = 0);
};

class MButtonEvent : public MouseEvent {
public:
	int button;
	bool pressed;
	int press_x, press_y;	// for depress events, the press coordinates

	MButtonEvent(int bn = 0, int x = 0, int y = 0);
};


class KeyboardEvent : public Event {
public:
	int key;
	bool pressed;

	KeyboardEvent(int key = 0);
};


// ---- high-level events, generated by UTK ----
class ClickEvent : public MouseEvent {
public:
	int button;
	unsigned int time;		// to catch double-clicks

	ClickEvent();
	virtual ~ClickEvent();
};

class FocusEvent : public Event {
public:
	bool focus;

	FocusEvent();
	virtual ~FocusEvent();
};

/* This is part of the low-level interface to utk.
 * The client program must call this to give input to utk.
 */
void event(Event *e);

int get_button_state();
Widget *get_button_press_widget();
IVec2 get_mouse_pos();
IVec2 get_last_drag_pos();

void grab_focus(Widget *w);

typedef void (*Callback)(Event*, void*);

struct CallbackClosure {
	Callback func;
	void *data;
};


extern std::list<Widget*> destruct_queue;

}	// end namespace utk

#endif	// UBERTK_EVENTS_H_
